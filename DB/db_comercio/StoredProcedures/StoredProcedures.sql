/* CRUDS MAIS SIMPLES 
-- USUARIO 			
-- ESTADO 			ok
-- MUNICIPIO 		ok
-- BAIRRO			OK
-- CEP
-- PESSOA
-- TIPOPAGAMENTO 	OK
-- PRODUTO			OK
-- UNIDADE MEDIDA	OK
-- CATEGORIA 		OK 
-- SUBCATEGORIA		OK
*/
##############################################################################################################################
-- TIPOPAGAMENTO

-- CALL SP_CADASTRAR_TIPO_PAGAMENTO('BTC');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_TIPO_PAGAMENTO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_TIPO_PAGAMENTO(DSC_TIPO_PAGAMENTO VARCHAR(90))
BEGIN
	INSERT INTO TIPO_PAGAMENTO (DSC_TIPO_PAGAMENTO) VALUES (DSC_TIPO_PAGAMENTO);
END //
DELIMITER ;

-- CALL SP_ALTERAR_TIPO_PAGAMENTO(5, 'BTC');
DROP PROCEDURE IF EXISTS SP_ALTERAR_TIPO_PAGAMENTO;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_TIPO_PAGAMENTO(COD_TIPO_PAGAMENTO INT , DSC_TIPO_PAGAMENTO VARCHAR(90))
BEGIN
	UPDATE TIPO_PAGAMENTO TP SET TP.DSC_TIPO_PAGAMENTO   = DSC_TIPO_PAGAMENTO
		WHERE TP.COD_TIPO_PAGAMENTO = COD_TIPO_PAGAMENTO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_TIPO_PAGAMENTO(5);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_TIPO_PAGAMENTO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_TIPO_PAGAMENTO(COD_TIPO_PAGAMENTO INT)
BEGIN
	DELETE FROM TIPO_PAGAMENTO TP WHERE TP.COD_TIPO_PAGAMENTO = COD_TIPO_PAGAMENTO;
END //
DELIMITER ;

##############################################################################################################################
-- CATEGORIA 

-- CALL SP_CADASTRAR_CATEGORIA('CALÇADOS');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_CATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_CATEGORIA (NME_CATEGORIA VARCHAR(100))
BEGIN
	INSERT INTO CATEGORIA (NME_CATEGORIA) VALUES (NME_CATEGORIA);
END //
DELIMITER ;

-- CALL SP_ALTERAR_CATEGORIA(9, 'CALÇADO');
DROP PROCEDURE IF EXISTS SP_ALTERAR_CATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_CATEGORIA(COD_CATEGORIA INT , NME_CATEGORIA VARCHAR(100))
BEGIN
	UPDATE CATEGORIA CT SET CT.NME_CATEGORIA   = 	NME_CATEGORIA
		WHERE CT.COD_CATEGORIA = COD_CATEGORIA;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_CATEGORIA(9);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_CATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_CATEGORIA(COD_CATEGORIA INT)
BEGIN
	DELETE FROM CATEGORIA CT WHERE CT.COD_CATEGORIA = COD_CATEGORIA;
END //
DELIMITER ;

############################################################################################################################

-- SUBCATEGORIA 


-- CALL SP_CADASTRAR_SUBCATEGORIA('TÊNIS', 'CALÇADOS');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_SUBCATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_SUBCATEGORIA (NME_SUBCATEGORIA VARCHAR(100), NME_CATEGORIA VARCHAR(100))
BEGIN
	DECLARE ID_CATEGORIA INT;
	SELECT COD_CATEGORIA INTO ID_CATEGORIA 
		FROM CATEGORIA CT 
        WHERE CT.NME_CATEGORIA = NME_CATEGORIA;
	INSERT INTO SUBCATEGORIA (NME_SUBCATEGORIA, COD_CATEGORIA) VALUES (NME_SUBCATEGORIA, ID_CATEGORIA);
END //
DELIMITER ;
-- CALL SP_ALTERAR_SUBCATEGORIA(23, 'TENIS', 'CALÇADOS');
DROP PROCEDURE IF EXISTS SP_ALTERAR_SUBCATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_SUBCATEGORIA(COD_SUBCATEGORIA INT, NME_SUBCATEGORIA VARCHAR(100), NME_CATEGORIA VARCHAR(100))
BEGIN
	DECLARE ID_CATEGORIA INT;
    SELECT COD_CATEGORIA INTO ID_CATEGORIA 
		FROM CATEGORIA CT 
        WHERE CT.NME_CATEGORIA = NME_CATEGORIA;
	UPDATE SUBCATEGORIA ST 
		SET ST.NME_SUBCATEGORIA   = NME_SUBCATEGORIA,
			ST.COD_CATEGORIA 	  = ID_CATEGORIA
		WHERE ST.COD_SUBCATEGORIA = COD_SUBCATEGORIA;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_SUBCATEGORIA(22);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_SUBCATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_SUBCATEGORIA(COD_SUBCATEGORIA INT)
BEGIN
	DELETE FROM SUBCATEGORIA SCT WHERE SCT.COD_SUBCATEGORIA = COD_SUBCATEGORIA;
END //
DELIMITER ;



##############################################################################################################################
-- UNIDADE_MEDIDA

-- CALL SP_CADASTRAR_UNIDADE_MEDIDA('GRAMA DE ONÇA','OZ');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_UNIDADE_MEDIDA;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_UNIDADE_MEDIDA (NME_UNIDADE_MEDIDA VARCHAR(100), SGL_UNIDADE_MEDIDA VARCHAR(50))
BEGIN
	INSERT INTO UNIDADE_MEDIDA (NME_UNIDADE_MEDIDA, SGL_UNIDADE_MEDIDA) VALUES (NME_UNIDADE_MEDIDA, SGL_UNIDADE_MEDIDA);
END //
DELIMITER ;

-- CALL SP_ALTERAR_UNIDADE_MEDIDA(6, 'LITRO', 'L');
DROP PROCEDURE IF EXISTS SP_ALTERAR_UNIDADE_MEDIDA;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_UNIDADE_MEDIDA(COD_UNIDADE_MEDIDA INT , NME_UNIDADE_MEDIDA VARCHAR(100), SGL_UNIDADE_MEDIDA VARCHAR(50))
BEGIN
	UPDATE UNIDADE_MEDIDA UM SET UM.NME_UNIDADE_MEDIDA   = 	NME_UNIDADE_MEDIDA, UM.SGL_UNIDADE_MEDIDA = SGL_UNIDADE_MEDIDA
		WHERE UM.COD_UNIDADE_MEDIDA = COD_UNIDADE_MEDIDA;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_UNIDADE_MEDIDA(7);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_UNIDADE_MEDIDA;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_UNIDADE_MEDIDA(COD_UNIDADE_MEDIDA INT)
BEGIN
	DELETE FROM UNIDADE_MEDIDA UM WHERE UM.COD_UNIDADE_MEDIDA	= COD_UNIDADE_MEDIDA;
END //
DELIMITER ;


##############################################################################################################################
-- PRODUTO 

DESC PRODUTO;
DESC SUBCATEGORIA;
DESC UNIDADE_MEDIDA;
SELECT * FROM SUBCATEGORIA;
SELECT * FROM PRODUTO;

-- CALL SP_CADASTRAR_PRODUTO('TENIS ADIDAS', 'TENIS ADIDAS DJNA239DK', 'TENIS', 'UNIDADE');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_PRODUTO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_PRODUTO (NME_PRODUTO VARCHAR(95), DSC_PRODUTO VARCHAR(100),NME_SUBCATEGORIA VARCHAR(95), NME_UNIDADE_MEDIDA VARCHAR(100))
BEGIN
	DECLARE ID_SUBCATEGORIA SMALLINT;
    DECLARE ID_UNIDADE_MEDIDA SMALLINT;
    SELECT  COD_SUBCATEGORIA INTO ID_SUBCATEGORIA 
		FROM SUBCATEGORIA SCT
        WHERE SCT.NME_SUBCATEGORIA = NME_SUBCATEGORIA LIMIT 1;
	SELECT COD_UNIDADE_MEDIDA INTO ID_UNIDADE_MEDIDA
		FROM UNIDADE_MEDIDA UMD
        WHERE UMD.NME_UNIDADE_MEDIDA = NME_UNIDADE_MEDIDA LIMIT 1;
	INSERT INTO PRODUTO (NME_PRODUTO, DSC_PRODUTO, COD_SUBCATEGORIA, COD_UNIDADE_MEDIDA) 
		VALUES (NME_PRODUTO, DSC_PRODUTO, ID_SUBCATEGORIA, ID_UNIDADE_MEDIDA);
END //
DELIMITER ;

-- CALL SP_ALTERAR_PRODUTO(216546531, 'TENIS ADIDAS', 'TENIS ADIDAS DJNA239DKS', 'TENIS', 'UNIDADE');
DROP PROCEDURE IF EXISTS SP_ALTERAR_PRODUTO;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_PRODUTO(COD_PRODUTO INT , NME_PRODUTO VARCHAR(95), DSC_PRODUTO VARCHAR(100), NME_SUBCATEGORIA VARCHAR(95), NME_UNIDADE_MEDIDA VARCHAR(95))
BEGIN
	DECLARE ID_SUBCATEGORIA SMALLINT;
    DECLARE ID_UNIDADE_MEDIDA SMALLINT;
    SELECT  COD_SUBCATEGORIA INTO ID_SUBCATEGORIA 
		FROM SUBCATEGORIA SCT
        WHERE SCT.NME_SUBCATEGORIA = NME_SUBCATEGORIA LIMIT 1;
	SELECT COD_UNIDADE_MEDIDA INTO ID_UNIDADE_MEDIDA
		FROM UNIDADE_MEDIDA UMD
        WHERE UMD.NME_UNIDADE_MEDIDA = NME_UNIDADE_MEDIDA LIMIT 1;
	UPDATE PRODUTO PR SET PR.NME_PRODUTO = 	NME_PRODUTO, PR.DSC_PRODUTO = DSC_PRODUTO, 
			PR.COD_SUBCATEGORIA = ID_SUBCATEGORIA, PR.COD_UNIDADE_MEDIDA = ID_UNIDADE_MEDIDA
		WHERE PR.COD_PRODUTO= COD_PRODUTO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_PRODUTO(216546531);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_PRODUTO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_PRODUTO(COD_PRODUTO INT)
BEGIN
	DELETE FROM PRODUTO PR WHERE PR.COD_PRODUTO = COD_PRODUTO;
END //
DELIMITER ;

##############################################################################################################################
-- BAIRRO

-- CALL SP_CADASTRAR_BAIRRO('Pimentas', 'Recife');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_BAIRRO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_BAIRRO (NME_BAIRRO VARCHAR(100), NME_MUNICIPIO VARCHAR(100))
BEGIN
	DECLARE ID_MUNICIPIO INT;
	SELECT COD_MUNICIPIO INTO ID_MUNICIPIO 
		FROM MUNICIPIO MP
        WHERE MP.NME_MUNICIPIO = NME_MUNICIPIO LIMIT 1;
	INSERT INTO BAIRRO(NME_BAIRRO, COD_MUNICIPIO) VALUES (NME_BAIRRO, ID_MUNICIPIO);
END //
DELIMITER ;

-- CALL SP_ALTERAR_BAIRRO(35182, 'Pimentinhas', 'Lins');
DROP PROCEDURE IF EXISTS SP_ALTERAR_BAIRRO;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_BAIRRO(COD_BAIRRO INT, NME_BAIRRO VARCHAR(100), NME_MUNICIPIO VARCHAR(100))
BEGIN
	DECLARE ID_MUNICIPIO INT;
	SELECT COD_MUNICIPIO INTO ID_MUNICIPIO 
		FROM MUNICIPIO MP
        WHERE MP.NME_MUNICIPIO = NME_MUNICIPIO LIMIT 1;
	UPDATE BAIRRO BR
		SET BR.NME_BAIRRO   	= NME_BAIRRO,
			BR.COD_MUNICIPIO 	= ID_MUNICIPIO
		WHERE BR.COD_BAIRRO = COD_BAIRRO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_BAIRRO(35182);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_BAIRRO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_BAIRRO(COD_BAIRRO INT)
BEGIN
	DELETE FROM BAIRRO BR WHERE BR.COD_BAIRRO = COD_BAIRRO;
END //
DELIMITER ;


##############################################################################################################################
-- MUNICIPIO

-- CALL SP_CADASTRAR_MUNICIPIO('ARIRANHA', 'ES');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_MUNICIPIO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_MUNICIPIO (NME_MUNICIPIO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
	DECLARE ID_ESTADO INT DEFAULT  NULL;
	SELECT COD_ESTADO INTO ID_ESTADO 
		FROM ESTADO ES
        WHERE ES.SGL_UF = SGL_UF LIMIT 1;
	INSERT INTO MUNICIPIO(NME_MUNICIPIO, COD_ESTADO) VALUES (NME_MUNICIPIO, ID_ESTADO);
END //
DELIMITER ;

SELECT * FROM MUNICIPIO;
DESC BAIRRO;
DESC ESTADO;

-- CALL SP_ALTERAR_MUNICIPIO (3557304, 'Ariranha', 'AM');
DROP PROCEDURE IF EXISTS SP_ALTERAR_MUNICIPIO;	       
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_MUNICIPIO(COD_MUNICIPIO INT, NME_MUNICIPIO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
	DECLARE ID_ESTADO INT DEFAULT  NULL;
	SELECT COD_ESTADO INTO ID_ESTADO 
		FROM ESTADO ES
        WHERE ES.SGL_UF = SGL_UF LIMIT 1;
	UPDATE MUNICIPIO MN
		SET MN.NME_MUNICIPIO   	= NME_MUNICIPIO,
			MN.COD_ESTADO 		= ID_ESTADO
		WHERE MN.COD_MUNICIPIO 	= COD_MUNICIPIO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_MUNICIPIO(3557304);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_MUNICIPIO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_MUNICIPIO(COD_MUNICIPIO INT)
BEGIN
	DELETE FROM MUNICIPIO BR WHERE BR.COD_MUNICIPIO = COD_MUNICIPIO;
END //
DELIMITER ;


##############################################################################################################################
-- ESTADO

-- CALL SP_CADASTRAR_ESTADO('JUJUBA', 'JJ');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_ESTADO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_ESTADO (NME_ESTADO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
	INSERT INTO ESTADO(NME_ESTADO, SGL_UF ) VALUES (NME_ESTADO, SGL_UF );
END //
DELIMITER ;

-- CALL SP_ALTERAR_ESTADO (54, 'Jujuba', 'JA');
DROP PROCEDURE IF EXISTS SP_ALTERAR_ESTADO;	       
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_ESTADO(COD_ESTADO INT, NME_MUNICIPIO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
	UPDATE ESTADO ES
		SET ES.NME_ESTADO   	= NME_ESTADO,
			ES.SGL_UF			= SGL_UF
		WHERE ES.COD_ESTADO 	= COD_ESTADO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_ESTADO(54);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_ESTADO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_ESTADO(COD_MUNICIPIO INT)
BEGIN
	DELETE FROM ESTADO ES WHERE ES.COD_ESTADO = COD_ESTADO;
END //
DELIMITER ;

#######################################################################################################################







#######################################################################################################################
-- TRATAMENTO DE EXCEÇÃO
/*
CREATE TABLE ACTOR2 AS SELECT * FROM  SAKILA.ACTOR;

INSERT INTO ACTOR2 (FIRST_NAME, LAST_NAME, LAST_UPDATE)  VALUES ('PENELOPE', 'GUINESS', '2006-02-15 03:34:33');

DROP TRIGGER TR_CHK_ACTOR ;
DELIMITER //

CREATE TRIGGER TR_CHK_ACTOR BEFORE INSERT 
ON ACTOR2 
FOR EACH ROW 
BEGIN 
DECLARE FIRST_NAME VARCHAR(50);
    DECLARE ID_ACTOR INT  DEFAULT 0;
	SELECT ACTOR_ID INTO ID_ACTOR FROM ACTOR2 WHERE FIRST_NAME = NEW.FIRST_NAME AND LAST_NAME = NEW.LAST_NAME;
    IF ID_ACTOR = 0  THEN 
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='ACTOR ALREADY EXISTS';
			
    END IF;
END //


*/
