/* CRUDS MAIS SIMPLES 
-- ESTADO 			OK
-- MUNICIPIO 		OK
-- BAIRRO			OK
-- TIPOPAGAMENTO 	OK
-- PRODUTO			OK
-- UNIDADE MEDIDA	OK
-- CATEGORIA 		OK 
-- SUBCATEGORIA		OK
-- PESSOA			OK
-- USUARIO 			OK
-- LOGRADOURO
-- CEP		

*/
##############################################################################################################################
-- TIPOPAGAMENTO

-- CALL SP_CADASTRAR_TIPO_PAGAMENTO('BTC');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_TIPO_PAGAMENTO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_TIPO_PAGAMENTO(DSC_TIPO_PAGAMENTO VARCHAR(90))
BEGIN
	IF EXISTS (SELECT DSC_TIPO_PAGAMENTO FROM TIPO_PAGAMENTO TP WHERE TP.DSC_TIPO_PAGAMENTO = DSC_TIPO_PAGAMENTO) THEN
		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='TIPO DE PAGAMENTO JÁ CADASTRADO';
	END IF;
	INSERT INTO TIPO_PAGAMENTO (DSC_TIPO_PAGAMENTO) VALUES (DSC_TIPO_PAGAMENTO);
END //
DELIMITER ;


-- CALL SP_ALTERAR_TIPO_PAGAMENTO(5, 'BTC');
DROP PROCEDURE IF EXISTS SP_ALTERAR_TIPO_PAGAMENTO;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_TIPO_PAGAMENTO(COD_TIPO_PAGAMENTO INT , DSC_TIPO_PAGAMENTO VARCHAR(90))
BEGIN
	UPDATE TIPO_PAGAMENTO TP SET TP.DSC_TIPO_PAGAMENTO   = DSC_TIPO_PAGAMENTO
		WHERE TP.COD_TIPO_PAGAMENTO = COD_TIPO_PAGAMENTO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_TIPO_PAGAMENTO(5);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_TIPO_PAGAMENTO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_TIPO_PAGAMENTO(COD_TIPO_PAGAMENTO INT)
BEGIN
	DELETE FROM TIPO_PAGAMENTO TP WHERE TP.COD_TIPO_PAGAMENTO = COD_TIPO_PAGAMENTO;
END //
DELIMITER ;

##############################################################################################################################
-- CATEGORIA 

-- CALL SP_CADASTRAR_CATEGORIA('CALÇADOS');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_CATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_CATEGORIA (NME_CATEGORIA VARCHAR(100))
BEGIN
	IF EXISTS (SELECT NME_CATEGORIA FROM CATEGORIA TP WHERE TP.NME_CATEGORIA = NME_CATEGORIA) THEN
		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='CATEGORIA JÁ CADASTRADA';
	END IF;
	INSERT INTO CATEGORIA (NME_CATEGORIA) VALUES (NME_CATEGORIA);
END //
DELIMITER ;

-- CALL SP_ALTERAR_CATEGORIA(9, 'CALÇADO');
DROP PROCEDURE IF EXISTS SP_ALTERAR_CATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_CATEGORIA(COD_CATEGORIA INT , NME_CATEGORIA VARCHAR(100))
BEGIN
	UPDATE CATEGORIA CT SET CT.NME_CATEGORIA   = 	NME_CATEGORIA
		WHERE CT.COD_CATEGORIA = COD_CATEGORIA;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_CATEGORIA(9);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_CATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_CATEGORIA(COD_CATEGORIA INT)
BEGIN
	DELETE FROM CATEGORIA CT WHERE CT.COD_CATEGORIA = COD_CATEGORIA;
END //
DELIMITER ;

############################################################################################################################

-- SUBCATEGORIA 
-- CALL SP_CADASTRAR_SUBCATEGORIA('TÊNIS', 'CALÇADOS');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_SUBCATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_SUBCATEGORIA (NME_SUBCATEGORIA VARCHAR(100), NME_CATEGORIA VARCHAR(100))
BEGIN
	DECLARE ID_CATEGORIA INT;
    IF EXISTS (SELECT NME_SUBCATEGORIA FROM SUBCATEGORIA SB WHERE SB.NME_SUBCATEGORIA = NME_SUBCATEGORIA) THEN
		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='SUBCATEGORIA JÁ CADASTRADA';
	END IF;
	SELECT COD_CATEGORIA INTO ID_CATEGORIA 
		FROM CATEGORIA CT 
        WHERE CT.NME_CATEGORIA = NME_CATEGORIA;
	IF ISNULL(ID_CATEGORIA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='SUBCATEGORIA ASSOCIADA A UMA CATEGORIA NÃO CADASTRADA ';
	END IF;  
	INSERT INTO SUBCATEGORIA (NME_SUBCATEGORIA, COD_CATEGORIA) VALUES (NME_SUBCATEGORIA, ID_CATEGORIA);
END //
DELIMITER ;


-- CALL SP_ALTERAR_SUBCATEGORIA(23, 'TENIS', 'CALÇADOS');
DROP PROCEDURE IF EXISTS SP_ALTERAR_SUBCATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_SUBCATEGORIA(COD_SUBCATEGORIA INT, NME_SUBCATEGORIA VARCHAR(100), NME_CATEGORIA VARCHAR(100))
BEGIN
	DECLARE ID_CATEGORIA INT;
    SELECT COD_CATEGORIA INTO ID_CATEGORIA 
		FROM CATEGORIA CT 
        WHERE CT.NME_CATEGORIA = NME_CATEGORIA;
	IF ISNULL(ID_CATEGORIA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='SUBCATEGORIA ASSOCIADA A UMA CATEGORIA NÃO CADASTRADA ';
	END IF;
	UPDATE SUBCATEGORIA ST 
		SET ST.NME_SUBCATEGORIA   = NME_SUBCATEGORIA,
			ST.COD_CATEGORIA 	  = ID_CATEGORIA
		WHERE ST.COD_SUBCATEGORIA = COD_SUBCATEGORIA;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_SUBCATEGORIA(22);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_SUBCATEGORIA;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_SUBCATEGORIA(COD_SUBCATEGORIA INT)
BEGIN
	DELETE FROM SUBCATEGORIA SCT WHERE SCT.COD_SUBCATEGORIA = COD_SUBCATEGORIA;
END //
DELIMITER ;

##############################################################################################################################
-- UNIDADE_MEDIDA

-- CALL SP_CADASTRAR_UNIDADE_MEDIDA('GRAMA DE ONÇA','OZ');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_UNIDADE_MEDIDA;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_UNIDADE_MEDIDA (NME_UNIDADE_MEDIDA VARCHAR(100), SGL_UNIDADE_MEDIDA VARCHAR(50))
BEGIN
	IF EXISTS (SELECT NME_UNIDADE_MEDIDA FROM UNIDADE_MEDIDA UM WHERE UM.NME_UNIDADE_MEDIDA = NME_UNIDADE_MEDIDA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='UNIDADE DE MEDIDA JÁ CADASTRADA';
	END IF;
	INSERT INTO UNIDADE_MEDIDA (NME_UNIDADE_MEDIDA, SGL_UNIDADE_MEDIDA) 
		VALUES (NME_UNIDADE_MEDIDA, SGL_UNIDADE_MEDIDA);
END //
DELIMITER ;

-- CALL SP_ALTERAR_UNIDADE_MEDIDA(6, 'LITRO', 'L');
DROP PROCEDURE IF EXISTS SP_ALTERAR_UNIDADE_MEDIDA;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_UNIDADE_MEDIDA(COD_UNIDADE_MEDIDA INT , NME_UNIDADE_MEDIDA VARCHAR(100), SGL_UNIDADE_MEDIDA VARCHAR(50))
BEGIN
	UPDATE UNIDADE_MEDIDA UM SET UM.NME_UNIDADE_MEDIDA   = 	NME_UNIDADE_MEDIDA, UM.SGL_UNIDADE_MEDIDA = SGL_UNIDADE_MEDIDA
		WHERE UM.COD_UNIDADE_MEDIDA = COD_UNIDADE_MEDIDA;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_UNIDADE_MEDIDA(7);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_UNIDADE_MEDIDA;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_UNIDADE_MEDIDA(COD_UNIDADE_MEDIDA INT)
BEGIN
	DELETE FROM UNIDADE_MEDIDA UM WHERE UM.COD_UNIDADE_MEDIDA	= COD_UNIDADE_MEDIDA;
END //
DELIMITER ;


##############################################################################################################################
-- PRODUTO 

-- CALL SP_CADASTRAR_PRODUTO('TENIS ADIDAS', 'TENIS ADIDAS DJNA239DK', 'TENIS', 'UNIDADE');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_PRODUTO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_PRODUTO (NME_PRODUTO VARCHAR(95), DSC_PRODUTO VARCHAR(100),NME_SUBCATEGORIA VARCHAR(95), NME_UNIDADE_MEDIDA VARCHAR(100))
BEGIN
	DECLARE ID_SUBCATEGORIA SMALLINT;
    DECLARE ID_UNIDADE_MEDIDA SMALLINT;
    IF EXISTS (SELECT NME_PRODUTO FROM PRODUTO PR WHERE PR.NME_PRODUTO = NME_PRODUTO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='PRODUTO JÁ CADASTRADO';
	END IF;
    SELECT  MIN(COD_SUBCATEGORIA) INTO ID_SUBCATEGORIA 
		FROM SUBCATEGORIA SCT
        WHERE SCT.NME_SUBCATEGORIA = NME_SUBCATEGORIA;
	IF ISNULL(ID_SUBCATEGORIA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='PRODUTO ASSOCIADO A UMA SUBCATEGORIA NÃO CADASTRADA ';
	END IF;         
	SELECT MIN(COD_UNIDADE_MEDIDA) INTO ID_UNIDADE_MEDIDA
		FROM UNIDADE_MEDIDA UMD
        WHERE UMD.NME_UNIDADE_MEDIDA = NME_UNIDADE_MEDIDA;
	IF ISNULL(ID_UNIDADE_MEDIDA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='PRODUTO ASSOCIADO A UMA UNIDADE DE MEDIDA NÃO CADASTRADA ';
	END IF;         
	INSERT INTO PRODUTO (NME_PRODUTO, DSC_PRODUTO, COD_SUBCATEGORIA, COD_UNIDADE_MEDIDA) 
		VALUES (NME_PRODUTO, DSC_PRODUTO, ID_SUBCATEGORIA, ID_UNIDADE_MEDIDA);
END //
DELIMITER ;

-- CALL SP_ALTERAR_PRODUTO(216546531, 'TENIS ADIDAS', 'TENIS ADIDAS DJNA239DKS', 'TENISO', 'UNIDADE');
DROP PROCEDURE IF EXISTS SP_ALTERAR_PRODUTO;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_PRODUTO(COD_PRODUTO INT , NME_PRODUTO VARCHAR(95), DSC_PRODUTO VARCHAR(100),
			NME_SUBCATEGORIA VARCHAR(95), NME_UNIDADE_MEDIDA VARCHAR(95))
BEGIN
	DECLARE ID_SUBCATEGORIA SMALLINT;
    DECLARE ID_UNIDADE_MEDIDA SMALLINT;
    SELECT  MIN(COD_SUBCATEGORIA) INTO ID_SUBCATEGORIA 
		FROM SUBCATEGORIA SCT
        WHERE SCT.NME_SUBCATEGORIA = NME_SUBCATEGORIA;
	IF ISNULL(ID_SUBCATEGORIA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='PRODUTO ASSOCIADO A UMA SUBCATEGORIA NÃO CADASTRADA ';
	END IF;  
	SELECT MIN(COD_UNIDADE_MEDIDA) INTO ID_UNIDADE_MEDIDA
		FROM UNIDADE_MEDIDA UMD
        WHERE UMD.NME_UNIDADE_MEDIDA = NME_UNIDADE_MEDIDA;
	IF ISNULL(ID_UNIDADE_MEDIDA) THEN
		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='PRODUTO ASSOCIADO A UMA UNIDADE DE MEDIDA NÃO CADASTRADA ';
	END IF;
	UPDATE PRODUTO PR SET PR.NME_PRODUTO = 	NME_PRODUTO, PR.DSC_PRODUTO = DSC_PRODUTO, 
			PR.COD_SUBCATEGORIA = ID_SUBCATEGORIA, PR.COD_UNIDADE_MEDIDA = ID_UNIDADE_MEDIDA
		WHERE PR.COD_PRODUTO= COD_PRODUTO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_PRODUTO(216546531);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_PRODUTO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_PRODUTO(COD_PRODUTO INT)
BEGIN
	DELETE FROM PRODUTO PR WHERE PR.COD_PRODUTO = COD_PRODUTO;
END //
DELIMITER ;

##############################################################################################################################
-- BAIRRO
DROP PROCEDURE IF EXISTS SP_CADASTRAR_BAIRRO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_BAIRRO (NME_BAIRRO VARCHAR(100), NME_MUNICIPIO VARCHAR(100))
BEGIN
	DECLARE ID_MUNICIPIO INT;
	SELECT MIN(COD_MUNICIPIO) INTO ID_MUNICIPIO 
		FROM MUNICIPIO MP
        WHERE MP.NME_MUNICIPIO = NME_MUNICIPIO;        
     IF EXISTS (SELECT NME_BAIRRO FROM BAIRRO BR WHERE BR.NME_BAIRRO = NME_BAIRRO AND BR.COD_MUNICIPIO = ID_MUNICIPIO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='BAIRRO JÁ CADASTRADO';
	END IF;        
    IF ISNULL(ID_MUNICIPIO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='BAIRRO ASSOCIADO A UM MUNICÍPIO NÃO CADASTRADO ';
	END IF;        
	INSERT INTO BAIRRO(NME_BAIRRO, COD_MUNICIPIO) VALUES (NME_BAIRRO, ID_MUNICIPIO);
END //
DELIMITER ;

-- CALL SP_ALTERAR_BAIRRO(35182, 'PIMENTINHAS', 'LINS');
DROP PROCEDURE IF EXISTS SP_ALTERAR_BAIRRO;	
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_BAIRRO(COD_BAIRRO INT, NME_BAIRRO VARCHAR(100), NME_MUNICIPIO VARCHAR(100))
BEGIN
	DECLARE ID_MUNICIPIO INT;
	SELECT MIN(COD_MUNICIPIO) INTO ID_MUNICIPIO 
		FROM MUNICIPIO MP
        WHERE MP.NME_MUNICIPIO = NME_MUNICIPIO;
	 IF ISNULL(ID_MUNICIPIO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='BAIRRO ASSOCIADO A UM MUNICÍPIO NÃO CADASTRADO ';
	END IF; 
	UPDATE BAIRRO BR
		SET BR.NME_BAIRRO   	= NME_BAIRRO,
			BR.COD_MUNICIPIO 	= ID_MUNICIPIO
		WHERE BR.COD_BAIRRO = COD_BAIRRO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_BAIRRO(35182);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_BAIRRO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_BAIRRO(COD_BAIRRO INT)
BEGIN
	DELETE FROM BAIRRO BR WHERE BR.COD_BAIRRO = COD_BAIRRO;
END //
DELIMITER ;


##############################################################################################################################
-- MUNICIPIO

-- CALL SP_CADASTRAR_MUNICIPIO('ARIRANHA', 'ES');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_MUNICIPIO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_MUNICIPIO (NME_MUNICIPIO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
	DECLARE ID_ESTADO INT;
    IF EXISTS (SELECT NME_MUNICIPIO FROM MUNICIPIO MN WHERE MN.NME_MUNICIPIO = NME_MUNICIPIO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='MUNICIPIO JÁ CADASTRADO ';
	END IF;
	SELECT MIN(COD_ESTADO) INTO ID_ESTADO 
		FROM ESTADO ES
        WHERE ES.SGL_UF = SGL_UF;
	IF ISNULL(ID_ESTADO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='MUNICÍPIO ASSOCIADO A UM ESTADO NÃO CADASTRADO';
	END IF;
	INSERT INTO MUNICIPIO(NME_MUNICIPIO, COD_ESTADO) VALUES (NME_MUNICIPIO, ID_ESTADO);
END //
DELIMITER ;

-- CALL SP_ALTERAR_MUNICIPIO (3557304, 'ARIRANHA', 'AM');
DROP PROCEDURE IF EXISTS SP_ALTERAR_MUNICIPIO;	       
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_MUNICIPIO(COD_MUNICIPIO INT, NME_MUNICIPIO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
	DECLARE ID_ESTADO INT;
	SELECT MIN(COD_ESTADO) INTO ID_ESTADO 
		FROM ESTADO ES
        WHERE ES.SGL_UF = SGL_UF;
	IF ISNULL(ID_ESTADO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='MUNICÍPIO ASSOCIADO A UM ESTADO NÃO CADASTRADO';
	END IF;
	UPDATE MUNICIPIO MN
		SET MN.NME_MUNICIPIO   	= NME_MUNICIPIO,
			MN.COD_ESTADO 		= ID_ESTADO
		WHERE MN.COD_MUNICIPIO 	= COD_MUNICIPIO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_MUNICIPIO(3557304);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_MUNICIPIO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_MUNICIPIO(COD_MUNICIPIO INT)
BEGIN
	DELETE FROM MUNICIPIO BR WHERE BR.COD_MUNICIPIO = COD_MUNICIPIO;
END //
DELIMITER ;

##############################################################################################################################
-- ESTADO

-- CALL SP_CADASTRAR_ESTADO('JUJUBA', 'JJ');
DROP PROCEDURE IF EXISTS SP_CADASTRAR_ESTADO;	
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_ESTADO (NME_ESTADO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
   IF EXISTS (SELECT NME_ESTADO FROM ESTADO ES WHERE ES.NME_ESTADO = NME_ESTADO) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='ESTADO JÁ CADASTRADO ';
	END IF;
	INSERT INTO ESTADO(NME_ESTADO, SGL_UF ) VALUES (NME_ESTADO, SGL_UF );
END //
DELIMITER ;


-- CALL SP_ALTERAR_ESTADO (54, 'JUJUBA', 'JA');
DROP PROCEDURE IF EXISTS SP_ALTERAR_ESTADO;	       
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_ESTADO(COD_ESTADO INT, NME_MUNICIPIO VARCHAR(100), SGL_UF VARCHAR(2))
BEGIN
	UPDATE ESTADO ES
		SET ES.NME_ESTADO   	= NME_ESTADO,
			ES.SGL_UF			= SGL_UF
		WHERE ES.COD_ESTADO 	= COD_ESTADO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_ESTADO(54);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_ESTADO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_ESTADO(COD_MUNICIPIO INT)
BEGIN
	DELETE FROM ESTADO ES WHERE ES.COD_ESTADO = COD_ESTADO;
END //
DELIMITER ;

#######################################################################################################################
-- USUARIO

-- CALL SP_CADASTRAR_USUARIO('GWINGA', '123', 'A', 1, 1);	
DROP PROCEDURE IF EXISTS SP_CADASTRAR_USUARIO;
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_USUARIO (DSC_LOGIN VARCHAR(30), DSC_SENHA VARCHAR(255), TPO_USUARIO CHAR(1), FLG_ATIVO TINYINT, COD_PESSOA INT)
BEGIN
	DECLARE ID_PESSOA INT;
    SELECT MIN(COD_PESSOA) INTO ID_PESSOA
		FROM PESSOA PS 
        WHERE PS.COD_PESSOA = COD_PESSOA;
    IF ISNULL(ID_PESSOA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='USUÁRIO ASSOCIADO A UMA PESSOA NÃO CADASTRADA';
	END IF;	
	IF EXISTS (SELECT DSC_LOGIN FROM USUARIO US WHERE US.DSC_LOGIN = DSC_LOGIN) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='USUÁRIO JÁ CADASTRADO';
	END IF;
	INSERT INTO USUARIO(DSC_LOGIN, DSC_SENHA, TPO_USUARIO, FLG_ATIVO, 	COD_PESSOA ) 
				VALUES (DSC_LOGIN, DSC_SENHA, TPO_USUARIO, FLG_ATIVO, 	COD_PESSOA);
END //
DELIMITER ;

DESC USUARIO;

-- CALL SP_ALTERAR_USUARIO (1, 'LEODEEP', '123', 'A', 0, 3);	
DROP PROCEDURE IF EXISTS SP_ALTERAR_USUARIO;
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_USUARIO(COD_USUARIO INT, DSC_LOGIN VARCHAR(30), DSC_SENHA VARCHAR(255), TPO_USUARIO CHAR(1), FLG_ATIVO TINYINT, COD_PESSOA INT)
BEGIN
	DECLARE ID_PESSOA INT;
	SELECT MIN(COD_PESSOA) INTO ID_PESSOA
		FROM PESSOA PS 
        WHERE PS.COD_PESSOA = COD_PESSOA;
    IF ISNULL(ID_PESSOA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='USUÁRIO ASSOCIADO A UMA PESSOA NÃO CADASTRADA';
	END IF;	
	UPDATE  USUARIO US
		SET US.DSC_LOGIN		   	= DSC_LOGIN,
			US.DSC_SENHA			= DSC_SENHA,
            US.TPO_USUARIO			= TPO_USUARIO,
			US.FLG_ATIVO			= FLG_ATIVO,
            US.COD_PESSOA			= COD_PESSOA
	WHERE 	US.COD_USUARIO			= COD_USUARIO;
END //
DELIMITER ;

-- CALL SP_EXCLUIR_USUARIO(2);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_USUARIO;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_USUARIO(COD_USUARIO INT)
BEGIN
	DELETE FROM USUARIO US WHERE US.COD_USUARIO = COD_USUARIO;
END //
DELIMITER ;

#######################################################################################################################
-- PESSOA
-- CALL SP_CADASTRAR_CLIENTE('MARCELO DANTAS', 'F', '000.000.000-00', '(11)92122-0001', 'MDANTAS@GMAIL.COM', 'M');	
DROP PROCEDURE IF EXISTS SP_CADASTRAR_CLIENTE;
DELIMITER //
CREATE PROCEDURE SP_CADASTRAR_CLIENTE(NME_PESSOA VARCHAR(100), TPO_PESSOA CHAR(1) , COD_CPF_CNPJ VARCHAR(20),
			NUM_TELEFONE VARCHAR(20), DSC_EMAIL VARCHAR(100), TPO_SEXO CHAR(1))
BEGIN
	DECLARE ID_PESSOA INT;
    IF EXISTS (SELECT NME_PESSOA FROM PESSOA PS WHERE PS.NME_PESSOA = NME_PESSOA AND PS.DSC_EMAIL = DSC_EMAIL) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='USUÁRIO JÁ CADASTRADO';
	END IF;
    INSERT INTO PESSOA (NME_PESSOA, COD_CPF_CNPJ, NUM_TELEFONE, DSC_EMAIL, TPO_PESSOA)
			VALUES (NME_PESSOA, COD_CPF_CNPJ, NUM_TELEFONE, DSC_EMAIL, TPO_PESSOA);
	SELECT LAST_INSERT_ID() INTO ID_PESSOA;
    INSERT INTO CLIENTE (COD_PESSOA, TPO_SEXO)
			VALUES (ID_PESSOA, TPO_SEXO);
END //
DELIMITER ;

-- CALL SP_ALTERAR_CLIENTE (7, 'MARCELO DANTAS', 'F', '000.000.000-00', '(11)92122-0001', 'MDANTAS@GMAIL.COM.BR', 'N');	
DROP PROCEDURE IF EXISTS SP_ALTERAR_CLIENTE;
DELIMITER //
CREATE PROCEDURE SP_ALTERAR_CLIENTE(COD_PESSOA INT, NME_PESSOA VARCHAR(100), TPO_PESSOA CHAR(1) , COD_CPF_CNPJ VARCHAR(20),
			NUM_TELEFONE VARCHAR(20), DSC_EMAIL VARCHAR(100), TPO_SEXO CHAR(1))
BEGIN
	DECLARE ID_PESSOA INT;
    SELECT MIN(COD_PESSOA) INTO ID_PESSOA
		FROM PESSOA PS 
        WHERE PS.NME_PESSOA = NME_PESSOA AND PS.NUM_TELEFONE = NUM_TELEFONE;
    IF ISNULL(ID_PESSOA) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='PESSOA NÃO CADASTRADA';
	END IF;		
    UPDATE PESSOA PS 
		SET PS.NME_PESSOA 		= NME_PESSOA, 
			PS.COD_CPF_CNPJ 	= COD_CPF_CNPJ, 
            PS.NUM_TELEFONE 	= NUM_TELEFONE, 
            PS.DSC_EMAIL		= DSC_EMAIL,
            PS.TPO_PESSOA 		= TPO_PESSOA
	WHERE PS.COD_PESSOA 		= ID_PESSOA;
	UPDATE CLIENTE CL
		SET CL.TPO_SEXO 		=	TPO_SEXO
	WHERE CL.COD_PESSOA 		= ID_PESSOA;  
END //
DELIMITER ;


-- CALL SP_EXCLUIR_CLIENTE(2);
DROP PROCEDURE IF EXISTS SP_EXCLUIR_CLIENTE;	
DELIMITER //
CREATE PROCEDURE SP_EXCLUIR_CLIENTE(COD_PESSOA INT)
BEGIN
	DECLARE ID_PESSOA INT;
    SELECT MIN(COD_PESSOA) INTO ID_PESSOA 
		FROM PESSOA PS
        WHERE PS.COD_PESSOA = COD_PESSOA ;
    DELETE FROM  USUARIO US WHERE US.COD_PESSOA = ID_PESSOA;
    DELETE FROM CLIENTE CL WHERE CL.COD_PESSOA = ID_PESSOA;
    DELETE FROM PESSOA PS WHERE PS.COD_PESSOA = ID_PESSOA;
END //
DELIMITER ;

DROP VIEW IF EXISTS VW_CLIENTE;
CREATE VIEW VW_CLIENTE AS 
SELECT PS.COD_PESSOA, PS.NME_PESSOA, PS.COD_CPF_CNPJ, PS.NUM_TELEFONE, PS.DSC_EMAIL, 
		CL.COD_CLIENTE, CL.TPO_SEXO
	FROM CLIENTE CL
    INNER JOIN PESSOA PS
		ON CL.COD_PESSOA = PS.COD_PESSOA
    ;










